import type { RegisterRequest, RegisterResponse } from '../types/auth.types';
import type { LoginRequest, LoginResponse } from '../types/auth.types';
import { AuthResponse } from '../types/auth.types';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

export const registerUser = async (
    data: RegisterRequest
): Promise<RegisterResponse> => {
    const response = await fetch(`${API_URL}/api/v1/auth/register`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    });

    if (!response.ok) {
        let errorData = {};
        try {
            errorData = await response.json();
        } catch {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        }
        throw new Error((errorData as any).detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    return await response.json();
};

export const loginUser = async (data: LoginRequest): Promise<LoginResponse> => {
    const response = await fetch(`${API_URL}/api/v1/auth/login`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });

    if (!response.ok) {
        let errorData;
        try {
            errorData = await response.json();
        } catch {
            errorData = { detail: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }

        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    return await response.json();
};

// src/api/authApi.ts



// üîÅ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π access-—Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh-—Ç–æ–∫–µ–Ω
export const refreshToken = async (): Promise<AuthResponse> => {
  const refresh_token = localStorage.getItem('refresh_token');

  if (!refresh_token) {
    throw new Error('–ù–µ—Ç refresh_token');
  }

  const response = await fetch(`${API_URL}/api/v1/auth/refresh`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${refresh_token}`,
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
  }

  return await response.json();
};
import {ChatRequest, ChatResponse} from '@/types/chat.types';
import {use} from "react";

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

// üîí –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
export const getChats = async (): Promise<ChatResponse[]> => {
    const accessToken = localStorage.getItem('access_token');

    const response = await fetch(`${API_URL}/api/v1/chats/`, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${accessToken}`,
        },
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã');
    }

    return await response.json();
};

// üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
export const createChat = async (data: ChatRequest): Promise<ChatResponse> => {
    const accessToken = localStorage.getItem('access_token');

    const response = await fetch(`${API_URL}/api/v1/chats/`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`,
        },
        body: JSON.stringify(data),
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç');
    }

    return await response.json();
};

// üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
export const addUserToChat = async (chatId: number, user_id: number): Promise<{ message: string }> => {
    const accessToken = localStorage.getItem('access_token');

    const response = await fetch(`${API_URL}/api/v1/chats/${chatId}/members?user_id=${user_id}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`,
        },
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    return await response.json();
};

export const removeUserFromChat = async (chatId: number, user_id: number): Promise<{ message: string }> => {
    const accessToken = localStorage.getItem('access_token');

    const response = await fetch(`${API_URL}/api/v1/chats/${chatId}/members/${user_id}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`,
        },
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    return await response.json();
}
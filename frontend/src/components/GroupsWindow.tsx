import React, {useState, useEffect} from 'react';
import '@/css/ChatWindow.css';
import {useCreateGroup} from '@/hooks/useCreateGroup';
import {useCreatedGroups} from '@/hooks/useCreatedGroups';
import {useCreateInvite} from '@/hooks/useCreateInvite';
import {useGetMemberGroups} from '@/hooks/useGetMemberGroups';
import {useGetPendingInvites} from '@/hooks/useGetPendingInvites';
import {useAcceptInvite} from '@/hooks/useAcceptInvite';
import {useDeclineInvite} from '@/hooks/useDeclineInvite';
import {Group} from '@/types/group.types';
import {InviteResponse} from '@/types/invite.types';
import {fetchAllUsers} from '@/api/userApi';

const FIXED_WIDTH = 300;
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

interface ApiGroup {
    id: number;
    name: string;
    creator_id: number;
    members: number[]; // ids
}

interface GroupsWindowProps {
    onClose: () => void;
    isOpen: boolean;
}

const GroupsWindow: React.FC<GroupsWindowProps> = ({
                                                       onClose,
                                                       isOpen,
                                                   }) => {
    const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);
    const [groupName, setGroupName] = useState('');
    const [isFormVisible, setIsFormVisible] = useState(false);
    const [showInviteForm, setShowInviteForm] = useState(false);
    const [recipientId, setRecipientId] = useState<string>('');
    const [newGroupLoading, setNewGroupLoading] = useState(false);
    const [formError, setFormError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è email
    const [users, setUsers] = useState<{ id: number, email: string }[]>([]);
    useEffect(() => {
        fetchAllUsers().then(setUsers);
    }, []);
    const idToEmail = React.useMemo(() => {
        const map: Record<number, string> = {};
        users.forEach(u => {
            map[u.id] = u.email;
        });
        return map;
    }, [users]);

    // –ì—Ä—É–∑–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
    const [allGroups, setAllGroups] = useState<ApiGroup[]>([]);
    useEffect(() => {
        fetch(`${API_URL}/api/v1/groups/all/`)
            .then(resp => resp.json())
            .then(setAllGroups)
            .catch(() => setAllGroups([]));
    }, []);

    // –ì—Ä—É–ø–ø—ã/–∏–Ω–≤–∞–π—Ç—ã (—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const {
        groups: createdGroups,
        refreshGroups: refreshCreatedGroups,
        loading: loadingCreatedGroups,
        error: createError,
    } = useCreatedGroups();
    const {onCreateGroup, loading: creating, error: createGroupError} = useCreateGroup();
    const {createInvite, loading: inviting, error: inviteError} = useCreateInvite();
    const {
        groups: memberGroups,
        loading: loadingMemberGroups,
        error: memberGroupsError,
        refreshGroups: refreshMemberGroups,
    } = useGetMemberGroups();
    const {
        invites: pendingInvites,
        loading: loadingInvites,
        error: inviteListError,
        refreshInvites,
    } = useGetPendingInvites();
    const {acceptInvite, loading: accepting, error: acceptError} = useAcceptInvite();
    const {declineInvite, loading: declining, error: declineError} = useDeclineInvite();

    const userStringId = localStorage.getItem('user_id');
    const userId = userStringId ? parseInt(userStringId, 10) : -1;

    // –ö–ª–∏–∫ –≤–Ω–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ
    useEffect(() => {
        const handleClickOutside = (e: MouseEvent) => {
            const groupWindow = document.querySelector('.groups-window');
            if (isOpen && groupWindow && !groupWindow.contains(e.target as Node)) {
                onClose();
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [onClose, isOpen]);

    // –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
    const handleSubmitGroup = async (e: React.FormEvent) => {
        e.preventDefault();
        setFormError(null);
        if (!groupName.trim()) {
            setFormError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');
            return;
        }
        setNewGroupLoading(true);
        try {
            await onCreateGroup({name: groupName});
            setGroupName('');
            setIsFormVisible(false);
            refreshCreatedGroups();
        } catch (err: any) {
            setFormError(err?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã');
        } finally {
            setNewGroupLoading(false);
        }
    };

    // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
    const handleSubmitInvite = async (e: React.FormEvent) => {
        e.preventDefault();
        setFormError(null);
        if (!recipientId.trim()) {
            setFormError('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è');
            return;
        }
        const recipient = parseInt(recipientId, 10);
        if (isNaN(recipient)) {
            setFormError('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
            return;
        }
        if (!selectedGroup) {
            setFormError('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É');
            return;
        }
        try {
            await createInvite({
                group_id: selectedGroup.id,
                sender_id: userId,
                recipient_id: recipient,
            });
            setRecipientId('');
            setShowInviteForm(false);
        } catch (err: any) {
            setFormError(err?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
        }
    };

    // –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const handleAccept = async (invite: InviteResponse) => {
        try {
            await acceptInvite(invite.id);
            refreshInvites();
            refreshMemberGroups();
        } catch {
        }
    };

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const handleDecline = async (invite: InviteResponse) => {
        try {
            await declineInvite(invite.id);
            refreshInvites();
        } catch {
        }
    };

    // –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã (selectedGroup)
    const currentApiGroup = allGroups.find(g => g.id === selectedGroup?.id);

    return (
        <div
            className={`chat-window groups-window${isOpen ? ' open' : ''}`}
            style={{
                left: 0,
                width: `${FIXED_WIDTH}px`,
                height: '100vh',
                borderRight: '1px solid rgba(255,255,255,0.17)',
                borderRadius: '0px',
                background: '#242424',
                color: '#fff',
                position: 'fixed',
                top: 0,
                zIndex: 1001,
                transition: 'box-shadow 0.2s',
                boxShadow: isOpen ? '2px 0 20px #0008' : 'none',
            }}
        >
            <div className="chat-content-scrollable">
                {!selectedGroup ? (
                    <>
                        <div className="chat-new-chat" style={{marginTop: 20}}>
                            {!isFormVisible ? (
                                <button
                                    className="new-chat-button"
                                    onClick={() => setIsFormVisible(true)}
                                    disabled={newGroupLoading}
                                >
                                    + –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
                                </button>
                            ) : (
                                <form onSubmit={handleSubmitGroup} className="new-chat-form">
                                    <input
                                        type="text"
                                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
                                        value={groupName}
                                        onChange={(e) => setGroupName(e.target.value)}
                                        className="new-chat-input"
                                        disabled={newGroupLoading}
                                    />
                                    <button
                                        type="submit"
                                        className="new-chat-submit"
                                        disabled={newGroupLoading}
                                    >
                                        {newGroupLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É'}
                                    </button>
                                    <button
                                        type="button"
                                        className="cancel-button"
                                        onClick={() => setIsFormVisible(false)}
                                        disabled={newGroupLoading}
                                    >
                                        –û—Ç–º–µ–Ω–∞
                                    </button>
                                    {(createGroupError || createError || formError) && (
                                        <p className="error-message">{formError || createGroupError || createError}</p>
                                    )}
                                </form>
                            )}
                        </div>
                        <div className="chat-new-chat">
                            <button
                                className="new-chat-button"
                                onClick={() =>
                                    setSelectedGroup({id: -1, name: '–ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', creator_id: userId})
                                }
                            >
                                üì¨ –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                            </button>
                        </div>
                        <div className="chat-new-chat">
                            <button
                                className="new-chat-button"
                                onClick={() =>
                                    setSelectedGroup({
                                        id: -2,
                                        name: '–ì—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ',
                                        creator_id: userId,
                                    })
                                }
                            >
                                üë• –í —Å–æ—Å—Ç–∞–≤–µ
                            </button>
                        </div>
                        <div className="chat-search">
                            <input type="text" placeholder="–ü–æ–∏—Å–∫" className="search-input"/>
                        </div>
                        <div className="chat-categories">
                            <strong className="category-title">–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π</strong>
                            {loadingCreatedGroups && <p className="empty-category">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                            {createdGroups.length === 0 && !loadingCreatedGroups && (
                                <p className="empty-category">–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã</p>
                            )}
                            {!loadingCreatedGroups &&
                                createdGroups.map((group) => (
                                    <div
                                        key={group.id}
                                        className="chat-item chat-item-clickable"
                                        onClick={() => setSelectedGroup(group)}
                                    >
                                        <strong className="chat-name-fade">{group.name}</strong>
                                    </div>
                                ))}
                        </div>
                    </>
                ) : selectedGroup.id === -1 ? (
                    <div className="group-details" style={{padding: 16}}>
                        <header className="group-details-header"
                                style={{display: 'flex', alignItems: 'center', gap: 12}}>
                            <button className="back-button" onClick={() => setSelectedGroup(null)}>‚Üê</button>
                            <span style={{fontSize: 19, fontWeight: 600}}>{selectedGroup.name}</span>
                        </header>
                        <div className="invites-list">
                            <h4>–í—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</h4>
                            {loadingInvites && <p className="empty-category">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                            {(inviteListError || acceptError || declineError) && (
                                <p className="error-message">
                                    {inviteListError || acceptError || declineError}
                                </p>
                            )}
                            {!loadingInvites && pendingInvites.length === 0 && (
                                <p className="empty-category">–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π</p>
                            )}
                            {!loadingInvites &&
                                pendingInvites.map((invite) => (
                                    <div key={invite.id} className="chat-item"
                                         style={{display: 'flex', flexDirection: 'column', gap: 2}}>
                                        <div>
                                            <strong>–ì—Ä—É–ø–ø–∞: {invite.group_id}</strong>
                                            <small style={{marginLeft: 7, color: "#aaa"}}>
                                                –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª: {idToEmail[invite.sender_id] || invite.sender_id}
                                            </small>
                                        </div>
                                        <div>
                                            <small style={{color: "#aaa"}}>
                                                –ü—Ä–∏–≥–ª–∞—à—ë–Ω: {idToEmail[invite.recipient_id] || invite.recipient_id}
                                            </small>
                                        </div>
                                        <div style={{display: 'flex', gap: 12, marginTop: 6}}>
                                            <button
                                                className="new-chat-submit"
                                                onClick={() => handleAccept(invite)}
                                                disabled={accepting || declining}
                                                style={{minWidth: 90}}
                                            >
                                                ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                                            </button>
                                            <button
                                                className="cancel-button"
                                                onClick={() => handleDecline(invite)}
                                                disabled={accepting || declining}
                                                style={{minWidth: 90}}
                                            >
                                                ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                                            </button>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    </div>
                ) : selectedGroup.id === -2 ? (
                    <div className="group-details" style={{padding: 16}}>
                        <header className="group-details-header"
                                style={{display: 'flex', alignItems: 'center', gap: 12}}>
                            <button className="back-button" onClick={() => setSelectedGroup(null)}>‚Üê</button>
                            <span style={{fontSize: 19, fontWeight: 600}}>{selectedGroup.name}</span>
                        </header>
                        <div className="member-groups-list">
                            <h4>–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö:</h4>
                            {loadingMemberGroups && <p className="empty-category">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
                            {memberGroupsError && <p className="error-message">{memberGroupsError}</p>}
                            {!loadingMemberGroups && memberGroups.length === 0 && (
                                <p className="empty-category">–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ</p>
                            )}
                            {!loadingMemberGroups &&
                                memberGroups.map((group) => (
                                    <div
                                        key={group.id}
                                        className="chat-item chat-item-clickable"
                                        onClick={() => setSelectedGroup(group)}
                                    >
                                        <strong className="chat-name-fade">{group.name}</strong>
                                        <small>–°–æ–∑–¥–∞—Ç–µ–ª—å: {idToEmail[group.creator_id] || group.creator_id}</small>
                                    </div>
                                ))}
                        </div>
                    </div>
                ) : (
                    <div className="group-details" style={{padding: 16}}>
                        <header className="group-details-header"
                                style={{display: 'flex', alignItems: 'center', gap: 12}}>
                            <button className="back-button" onClick={() => setSelectedGroup(null)}>‚Üê</button>
                            <span style={{fontSize: 19, fontWeight: 600}}>{selectedGroup?.name}</span>
                        </header>
                        <div className="group-info" style={{margin: '10px 0 20px 0'}}>
                            <small>–°–æ–∑–¥–∞—Ç–µ–ª—å: {idToEmail[selectedGroup?.creator_id || 0] || selectedGroup?.creator_id}</small>
                        </div>

                        {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                        <div style={{marginBottom: 18}}>
                            <strong style={{fontSize: 15, color: "#b36af7"}}>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã:</strong>
                            {!currentApiGroup && <div className="empty-category">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ</div>}
                            {currentApiGroup && currentApiGroup.members.length === 0 && (
                                <div className="empty-category">–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç</div>
                            )}
                            {currentApiGroup && currentApiGroup.members.length > 0 && (
                                <ul style={{margin: "8px 0 0 0", padding: 0, listStyle: "none"}}>
                                    {currentApiGroup.members.map((id) => (
                                        <li key={id} style={{
                                            padding: "4px 0",
                                            fontSize: 15,
                                            color: "#fff",
                                            display: 'flex',
                                            alignItems: 'center'
                                        }}>
                                            <span>{idToEmail[id] || id}</span>
                                            {id === currentApiGroup.creator_id && (
                                                <span
                                                    style={{marginLeft: 8, color: '#b36af7', fontSize: 13}}>owner</span>
                                            )}
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>

                        <div>
                            <button
                                className="new-chat-button"
                                onClick={() => setShowInviteForm(true)}
                                style={{minWidth: 180, fontSize: 15}}
                            >
                                üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                            </button>
                        </div>
                    </div>
                )}
                {/* –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
                {showInviteForm && (
                    <div className="invite-form-overlay" style={{
                        position: 'fixed',
                        top: 0, left: 0, width: '100vw', height: '100vh',
                        background: 'rgba(0,0,0,0.35)',
                        zIndex: 9999,
                        display: 'flex', alignItems: 'center', justifyContent: 'center'
                    }}>
                        <form onSubmit={handleSubmitInvite} className="invite-form" style={{
                            background: '#18122b',
                            padding: 28,
                            borderRadius: 16,
                            minWidth: 340,
                            boxShadow: '0 4px 24px #000b',
                            display: 'flex',
                            flexDirection: 'column',
                            gap: 12
                        }}>
                            <h4>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
                            <input
                                type="text"
                                placeholder="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
                                value={recipientId}
                                onChange={(e) => setRecipientId(e.target.value)}
                                className="new-chat-input"
                                disabled={inviting}
                                style={{fontSize: 17}}
                            />
                            <div style={{display: 'flex', gap: 12}}>
                                <button
                                    type="submit"
                                    className="new-chat-submit"
                                    disabled={inviting}
                                    style={{minWidth: 120}}
                                >
                                    {inviting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'}
                                </button>
                                <button
                                    type="button"
                                    className="cancel-button"
                                    onClick={() => setShowInviteForm(false)}
                                    disabled={inviting}
                                    style={{minWidth: 120}}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                            </div>
                            {(inviteError || formError) && <p className="error-message">{formError || inviteError}</p>}
                        </form>
                    </div>
                )}
            </div>
        </div>
    );
};

export default GroupsWindow;

interface GroupsWindowProps {
  onClose: () => void;
  groupWidth: number;
  setGroupWidth: (width: number) => void;
  isOpen: boolean;
}
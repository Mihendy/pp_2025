import React, { useRef, useState, useEffect } from 'react';
import '@/css/GroupsWindow.css';

// –•—É–∫–∏
import { useCreateGroup } from '@/hooks/useCreateGroup';
import { useCreatedGroups } from '@/hooks/useCreatedGroups';
import { useCreateInvite } from '@/hooks/useCreateInvite';

// –¢–∏–ø—ã
import { Group } from '@/types/group.types';

type ResizeDimension = 'width' | 'height' | 'both';

interface GroupsWindowProps {
  onClose: () => void;
  groupWidth: number;
  setGroupWidth: (width: number) => void;
  isOpen: boolean;
}

const GroupsWindow: React.FC<GroupsWindowProps> = ({
  onClose,
  groupWidth,
  setGroupWidth,
  isOpen,
}) => {
  const windowRef = useRef<HTMLDivElement>(null);
  const [height, setHeight] = useState(window.innerHeight);
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);
  const [groupName, setGroupName] = useState('');
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [showInviteForm, setShowInviteForm] = useState(false);
  const [recipientId, setRecipientId] = useState<string>('');
  const [newGroupLoading, setNewGroupLoading] = useState(false);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø
  const { groups: createdGroups, refreshGroups: refreshCreatedGroups } = useCreatedGroups();
  const { onCreateGroup, loading: creating, error: createError } = useCreateGroup();
  const { createInvite, loading: inviting, error: inviteError } = useCreateInvite();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userStringId = localStorage.getItem('user_id');
  const userId = userStringId ? parseInt(userStringId, 10) : -1;

  // –†–µ—Å–∞–π–∑ –æ–∫–Ω–∞
  const handleResizeStart = (
    e: React.MouseEvent,
    dimension: ResizeDimension
  ) => {
    e.stopPropagation();
    e.preventDefault();

    const startX = e.clientX;
    const startY = e.clientY;

    const doDrag = (moveEvent: MouseEvent) => {
      let newWidth = groupWidth;
      let newHeight = height;

      if (dimension === 'width' || dimension === 'both') {
        newWidth = groupWidth + (startX - moveEvent.clientX);
        if (newWidth < 250) newWidth = 250;
        setGroupWidth(newWidth);
      }

      if (dimension === 'height' || dimension === 'both') {
        newHeight = height - (startY - moveEvent.clientY);
        if (newHeight < 200) newHeight = 200;
        setHeight(newHeight);
      }
    };

    const stopDrag = () => {
      document.removeEventListener('mousemove', doDrag);
      document.removeEventListener('mouseup', stopDrag);
    };

    document.addEventListener('mousemove', doDrag);
    document.addEventListener('mouseup', stopDrag);
  };

  // –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      const groupWindow = document.querySelector('.groups-window');
      if (isOpen && groupWindow && !groupWindow.contains(e.target as Node)) {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [onClose, isOpen]);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–∫–Ω–∞ –≥—Ä—É–ø–ø—ã
  const openGroupDetails = (group: Group) => {
    setSelectedGroup(group);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
  const handleSubmitGroup = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!groupName.trim()) return alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');

    setNewGroupLoading(true);
    try {
      await onCreateGroup({ name: groupName });
      setGroupName('');
      setIsFormVisible(false);
      refreshCreatedGroups(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', err);
    } finally {
      setNewGroupLoading(false);
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const handleSubmitInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!recipientId.trim()) return alert('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è');

    const recipient = parseInt(recipientId, 10);
    if (isNaN(recipient)) return alert('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');

    if (!selectedGroup) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É');

    try {
      await createInvite({
        group_id: selectedGroup.id,
        sender_id: userId,
        recipient_id: recipient,
      });
      alert('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      setRecipientId('');
    } catch (err: any) {
      alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  };

  return (
    <div
      ref={windowRef}
      className={`groups-window${isOpen ? ' open' : ''}`}
      style={{
        left: 0,
        width: `${groupWidth}px`,
        height: `${height}px`,
      }}
    >
      {/* –•—ç–Ω–¥–ª–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ */}
      <div
        className="resize-handle resize-handle-right"
        onMouseDown={(e) => handleResizeStart(e, 'width')}
      />
      <div
        className="resize-handle resize-handle-bottom"
        onMouseDown={(e) => handleResizeStart(e, 'height')}
      />
      <div
        className="resize-handle resize-handle-corner"
        onMouseDown={(e) => handleResizeStart(e, 'both')}
      />

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="chat-content-scrollable">
        {!selectedGroup ? (
          <>
            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã */}
            <div className="chat-new-chat" style={{ marginTop: '20px' }}>
              {!isFormVisible ? (
                <button
                  className="new-chat-button"
                  onClick={() => setIsFormVisible(true)}
                  disabled={newGroupLoading}
                >
                  + –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
                </button>
              ) : (
                <form onSubmit={handleSubmitGroup} className="new-chat-form">
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
                    value={groupName}
                    onChange={(e) => setGroupName(e.target.value)}
                    className="new-chat-input"
                    disabled={newGroupLoading}
                  />
                  <button
                    type="submit"
                    className="new-chat-submit"
                    disabled={newGroupLoading}
                  >
                    {newGroupLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É'}
                  </button>
                  <button
                    type="button"
                    className="cancel-button"
                    onClick={() => setIsFormVisible(false)}
                    disabled={newGroupLoading}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  {createError && <p className="error-message">{createError}</p>}
                </form>
              )}
            </div>

            {/* –ü–æ–∏—Å–∫ */}
            <div className="chat-search">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫"
                className="search-input"
              />
            </div>

            {/* –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}
            <div className="chat-categories">
              <strong className="category-title">–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π</strong>
              {createdGroups.length === 0 ? (
                <p className="empty-category">–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã</p>
              ) : (
                createdGroups.map((group) => (
                  <div
                    key={group.id}
                    className="chat-item"
                    onClick={() => openGroupDetails(group)}
                  >
                    <strong>{group.name}</strong>
                  </div>
                ))
              )}
            </div>
          </>
        ) : (
          // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ –≥—Ä—É–ø–ø—ã
          <div className="group-details">
            <header className="group-details-header">
              <button className="back-button" onClick={() => setSelectedGroup(null)}>
                ‚Üê
              </button>
              <span>{selectedGroup.name}</span>
            </header>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ */}
            <div className="group-info">
              <small>–°–æ–∑–¥–∞—Ç–µ–ª—å: ID {selectedGroup.creator_id}</small>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            <div className="members-list">
              <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</h4>
              <ul>
                <li>–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</li>
              </ul>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
            <div className="group-footer-above">
              <button
                className="create-invite-button"
                onClick={() => setShowInviteForm(true)}
              >
                üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
              </button>
            </div>
          </div>
        )}

        {/* –§–æ—Ä–º–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞) */}
        {showInviteForm && (
          <div className="invite-form-overlay">
            <form onSubmit={handleSubmitInvite} className="invite-form">
              <h4>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h4>
              <input
                type="text"
                placeholder="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
                value={recipientId}
                onChange={(e) => setRecipientId(e.target.value)}
                className="new-chat-input"
                disabled={inviting}
              />
              <button
                type="submit"
                className="new-chat-submit"
                disabled={inviting}
              >
                {inviting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'}
              </button>
              <button
                type="button"
                className="cancel-button"
                onClick={() => setShowInviteForm(false)}
                disabled={inviting}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              {inviteError && <p className="error-message">{inviteError}</p>}
            </form>
          </div>
        )}
      </div>
    </div>
  );
};

export default GroupsWindow;